// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Spex {
    using System;
    
    
    public partial class RuntimeTextTemplate1 : RuntimeTextTemplate1Base {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 2 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\n<html>\n<head>\n\t<link href=\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\" rel=\"stylesheet\">\n\t<style type=\"text/css\">\n\t\tbody {\n\t\t\tfont-family: Helvetica, Arial, sans serif;\n\t\t}\n\t\th2 {\n\t\t\tborder-bottom: 1px solid #eee;\n\t\t\tpadding-bottom: 5px;\n\t\t}\n\t</style>\n\n</head>\n<body>\n<h1>");
            
            #line default
            #line hidden
            
            #line 18 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Data.Title ));
            
            #line default
            #line hidden
            
            #line 18 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("</h1>\n<div>\n\t");
            
            #line default
            #line hidden
            
            #line 20 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 foreach (Scenario scenario in Data.Scenarios)
	{ 
            
            #line default
            #line hidden
            
            #line 22 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t<h2>\n\t\t\t");
            
            #line default
            #line hidden
            
            #line 23 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 if(scenario.Outcome == "Pass") { 
            
            #line default
            #line hidden
            
            #line 24 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t\t<i class=\"fa fa-check\"></i>\n\t\t\t");
            
            #line default
            #line hidden
            
            #line 25 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 26 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t\t<i class=\"fa fa-warning\"></i>\n\t\t\t");
            
            #line default
            #line hidden
            
            #line 27 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 } 
            
            #line default
            #line hidden
            
            #line 28 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t");
            
            #line default
            #line hidden
            
            #line 28 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( scenario.Title ));
            
            #line default
            #line hidden
            
            #line 28 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(" \n\t\t</h2>\n\t\t<table>\n\t\t");
            
            #line default
            #line hidden
            
            #line 31 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 foreach (TestStep step in scenario.Steps)
		{ 
            
            #line default
            #line hidden
            
            #line 33 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t<tr>\n\t\t\t\t<td>\t\n\t\t\t\t\t");
            
            #line default
            #line hidden
            
            #line 35 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 if(step.Outcome == "Pass") { 
            
            #line default
            #line hidden
            
            #line 36 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t\t\t\t<i class=\"fa fa-check\"></i>\n\t\t\t\t\t");
            
            #line default
            #line hidden
            
            #line 37 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 38 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t\t\t\t<i class=\"fa fa-warning\"></i>\n\t\t\t\t\t");
            
            #line default
            #line hidden
            
            #line 39 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 } 
            
            #line default
            #line hidden
            
            #line 40 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t\t\t</td>\n\t\t\t\t<td> ");
            
            #line default
            #line hidden
            
            #line 41 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( step.Kind ));
            
            #line default
            #line hidden
            
            #line 41 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(" </td>\n\t\t\t\t<td> ");
            
            #line default
            #line hidden
            
            #line 42 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( step.Description ));
            
            #line default
            #line hidden
            
            #line 42 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write(" </td>\n\t\t\t</tr>\n\t\t");
            
            #line default
            #line hidden
            
            #line 44 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
}
            
            #line default
            #line hidden
            
            #line 45 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("\t\t</table>\n\t");
            
            #line default
            #line hidden
            
            #line 46 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
 } 
            
            #line default
            #line hidden
            
            #line 47 "/Users/gamroth/Workspaces/github/Laurus.Spex/Spex/RuntimeTextTemplate1.tt"
            this.Write("</div>\n</body>\n</html>");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        protected virtual void Initialize() {
        }
    }
    
    public class RuntimeTextTemplate1Base {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((this.formatProvider == null)) {
                        throw new global::System.ArgumentNullException("formatProvider");
                    }
                    this.formatProvider = value;
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
